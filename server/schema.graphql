input AllFiltersInput {
  name: String = null
  profile: String = null
  decklist: String = null
  wins: OperatorTypeIntInput = null
  winsSwiss: OperatorTypeIntInput = null
  winsBracket: OperatorTypeIntInput = null
  winRate: OperatorTypeIntInput = null
  winRateSwiss: OperatorTypeIntInput = null
  winRateBracket: OperatorTypeIntInput = null
  draws: OperatorTypeIntInput = null
  losses: OperatorTypeIntInput = null
  lossesSwiss: OperatorTypeIntInput = null
  lossesBracket: OperatorTypeIntInput = null
  standing: OperatorTypeIntInput = null
  colorID: String = null
  commander: String = null
  tournamentFilters: TournamentFiltersInput = null
}

type CommanderType {
  name: String!
  colorID: String
  wins: Int
  winsSwiss: Int
  winsBracket: Int
  draws: Int
  losses: Int
  lossesSwiss: Int
  lossesBracket: Int
  count: Int
  winRate: Float
  winRateSwiss: Float
  winRateBracket: Float
  topCuts: Int
  conversionRate: Float
}

"""Date with time (isoformat)"""
scalar DateTime

type EntryType {
  id: String
  name: String
  profile: String
  decklist: String
  wins: Int
  winsSwiss: Int
  winsBracket: Int
  winRate: Float
  winRateSwiss: Float
  winRateBracket: Float
  draws: Int
  drawsSwiss: Int
  losses: Int
  lossesSwiss: Int
  lossesBracket: Int
  standing: Int
  colorID: String
  commander: String
  tournamentName: String
  TID: String
  topCut: Int
}

input OperatorTypeIntInput {
  lte: Int = null
  lt: Int = null
  eq: Int = null
  gte: Int = null
  gt: Int = null
  ne: Int = null
  in_: [Int!] = null
  nin: [Int!] = null
  regex: String = null
  exists: Boolean = null
  mod: [Int!] = null
  all_: [Int!] = null
  size: Int = null
}

type PlayerType {
  name: String
  profile: String
  wins: Int
  winsSwiss: Int
  winsBracket: Int
  winRate: Float
  winRateSwiss: Float
  winRateBracket: Float
  draws: Int
  losses: Int
  lossesSwiss: Int
  lossesBracket: Int
  conversionRate: Float
  topCuts: Int
  tournaments: [EntryType!]
}

type Query {
  commanders(tournamentFilters: TournamentFiltersInput = null): [CommanderType!]!
  tournaments(tournamentFilters: TournamentFiltersInput = null): [TournamentType!]!
  entries(filters: AllFiltersInput = null): [EntryType!]!
  player(profile: String!): PlayerType
}

input TournamentFiltersInput {
  dateCreated: OperatorTypeIntInput = null
  size: OperatorTypeIntInput = null
  TID: String = null
  tournamentName: String = null
  swissNum: OperatorTypeIntInput = null
  topCut: OperatorTypeIntInput = null
}

type TournamentType {
  entries: [EntryType!]!
  TID: String
  tournamentName: String
  size: Int
  date: DateTime
  dateCreated: Int
  swissNum: Int
  topCut: Int
}
