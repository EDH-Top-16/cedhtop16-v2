generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "sqlite"
  url      = "file:edhtop16.db"
}

model Tournament {
  uuid String @id

  /// ID of the tournament as tracked by topdeck.
  TID            String   @unique
  /// Display name of the tournament.
  name           String
  /// Date which the tournament was played.
  tournamentDate DateTime
  /// Number of players.
  size           Int
  /// Number of swiss rounds.
  swissRounds    Int
  /// Number of players making top cut.
  topCut         Int
  /// Link to bracket on source site.
  bracketUrl     String?

  entries Entry[]

  @@index([TID])
}

model Player {
  uuid String @id

  /// Unique topdeck profile ID.
  topdeckProfile String? @unique
  /// Name of this player, as found in their most recent tournament.
  name           String

  entries Entry[]

  @@index([topdeckProfile])
}

model Commander {
  uuid String @id

  /// Name of the commander, or commanders.
  name    String
  /// Color identity, e.g RUG.
  colorId String

  entries Entry[]
}

model Entry {
  uuid String @id

  tournamentUuid String
  playerUuid     String
  commanderUuid  String

  standing      Int
  decklist      String?
  winsSwiss     Int
  winsBracket   Int
  draws         Int
  lossesSwiss   Int
  lossesBracket Int

  tournament   Tournament     @relation(fields: [tournamentUuid], references: [uuid])
  player       Player         @relation(fields: [playerUuid], references: [uuid])
  commander    Commander      @relation(fields: [commanderUuid], references: [uuid])
  DecklistItem DecklistItem[]
}

model Card {
  uuid String @id

  /// Scryfall's Oracle ID to uniquely identify a card.
  oracleId String @unique
  /// Card name.
  name     String
  /// Scryfall card data intended to be parsed using scryfallCardSchema.
  data     String

  DecklistItem DecklistItem[]
}

model DecklistItem {
  entryUuid String
  cardUuid  String

  entry Entry @relation(fields: [entryUuid], references: [uuid])
  card  Card  @relation(fields: [cardUuid], references: [uuid])

  @@id([entryUuid, cardUuid])
}
