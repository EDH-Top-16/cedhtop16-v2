import { faker } from "@faker-js/faker";
import { Player, PrismaClient } from "@prisma/client";
import Mustache from "mustache";
import * as fs from "node:fs/promises";
import * as path from "node:path";
import { parseArgs } from "node:util";

const prisma = new PrismaClient();

const escapedCharMap: Record<string, string> = {
  ["\n"]: "\\n",
  ["\r"]: "\\r",
  ["\t"]: "\\t",
  ["\f"]: "\\f",
  ['"']: '\\"',
  ["'"]: "\\'",
  ["&"]: "\\&",
};

Mustache.escape = function escapeJson(json: string) {
  return json.replace(/[\\\n\r\t\f"'\&]/g, (char) => escapedCharMap[char]!);
};

const GENERATED_FILE_HEADER = `// DO NOT MODIFY.
//
// This file was generated by scripts/generate-seed-script.ts
// To regenerte this file, run:
//
//     npm run generate:seed -- --tid=TOURNAMENT_1 --tid=TOURNAMENT_2
//
// while connected to the production database.

`;

function anonymizePlayer(player: Player): Player {
  return {
    uuid: player.uuid,
    name: faker.person.fullName(),
    topdeckProfile: faker.string.nanoid(),
  };
}

async function getSeedScriptData(TIDs: string[]) {
  const tournaments = await prisma.tournament.findMany({
    where: { TID: { in: TIDs } },
    include: { entries: true },
  });

  const entries = tournaments.flatMap((t) => t.entries);

  const players = await prisma.player.findMany({
    where: {
      uuid: {
        in: Array.from(new Set(entries.map((e) => e.playerUuid))).filter(
          (uuid) => uuid != null,
        ),
      },
    },
  });

  const commanders = await prisma.commander.findMany({
    where: {
      uuid: {
        in: Array.from(new Set(entries.map((e) => e.commanderUuid))),
      },
    },
  });

  return {
    tournaments: JSON.stringify(
      tournaments.map((t) => ({ ...t, entries: undefined })),
    ),
    entries: JSON.stringify(entries),
    commanders: JSON.stringify(commanders),
    players: JSON.stringify(players.map(anonymizePlayer)),
  };
}

async function main(TIDs: string[]) {
  const seedScriptTemplate = (
    await fs.readFile(path.join(process.cwd(), "scripts", "seed.tmpl.ts"))
  ).toString();

  const data = await getSeedScriptData(TIDs);

  await fs.writeFile(
    path.join(process.cwd(), "prisma", "seed.ts"),
    GENERATED_FILE_HEADER + Mustache.render(seedScriptTemplate, data),
  );
}

const {
  values: { tid: importedTids = [] },
} = parseArgs({
  options: {
    tid: {
      type: "string",
      multiple: true,
    },
  },
});

main(importedTids)
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
