type Commander {
  colorId: String!
  conversionRate(filters: Filters): Float!
  count(filters: Filters): Int!
  entries: [Entry!]!
  id: ID!
  name: String!
  topCuts(filters: Filters): Int!
}

enum CommanderSortBy {
  COUNT
  TOP_CUTS
}

type Entry {
  commander: Commander!
  decklist: String
  draws: Int!
  id: ID!
  losses: Int!
  lossesBracket: Int!
  lossesSwiss: Int!
  player: Player
  standing: Int!
  tables: [TournamentTable!]!
  tournament: Tournament!
  wins: Int!
  winsBracket: Int!
  winsSwiss: Int!
}

input Filters {
  colorId: String
  minDate: String
  minEntries: Int
  minSize: Int
  topCut: Int
}

type Player {
  conversionRate: Float!
  draws: Int!
  entries: [Entry!]!
  id: ID!
  losses: Int!
  name: String!
  topCuts: Int!
  topdeckProfile: String
  winRate: Float!
  wins: Int!
}

type Query {
  commander(name: String!): Commander!
  commanderNames: [String!]!
  commanders(
    filters: Filters
    sortBy: CommanderSortBy = TOP_CUTS
    sortDir: SortDirection = DESC
  ): [Commander!]!
  player(profile: String!): Player!
  tournament(TID: String!): Tournament!
  tournaments: [Tournament!]!
}

enum SortDirection {
  ASC
  DESC
}

type Tournament {
  TID: String!
  entries: [Entry!]!
  id: ID!
  name: String!
  rounds: [TournamentRound!]!
  size: Int!
  swissRounds: Int!
  topCut: Int!
  tournamentDate: String!
}

type TournamentRound {
  round: String!
  tables: [TournamentTable!]!
}

type TournamentTable {
  entries: [Entry]!
  roundName: String!
  table: Int!
  winner: Entry
  winnerSeatPosition: Int
}
