type Card implements Node {
  cmc: Int!
  colorId: String!
  id: ID!

  """
  Card name.
  """
  name: String!

  """
  Scryfall's Oracle ID to uniquely identify a card.
  """
  oracleId: String!
  type: String!
}

type Commander implements Node {
  breakdownUrl: String!

  """
  Color identity, e.g RUG.
  """
  colorId: String!
  conversionRate(filters: CommanderStatsFilters): Float!
  count(filters: CommanderStatsFilters): Int!
  entries(
    after: String
    before: String
    filters: EntriesFilter
    first: Int
    last: Int
    sortBy: EntriesSortBy = TOP
  ): CommanderEntriesConnection!
  id: ID!
  imageUrls: [String!]!

  """
  Name of the commander, or commanders.
  """
  name: String!
  topCuts(filters: CommanderStatsFilters): Int!
}

type CommanderEntriesConnection {
  edges: [CommanderEntriesConnectionEdge!]!
  pageInfo: PageInfo!
}

type CommanderEntriesConnectionEdge {
  cursor: String!
  node: Entry!
}

enum CommanderSortBy {
  CONVERSION
  ENTRIES
  NAME
  TOP_CUTS
}

input CommanderStatsFilters {
  colorId: String
  maxDate: String
  maxEntries: Int
  maxSize: Int
  minDate: String
  minEntries: Int
  minSize: Int
  timePeriod: TimePeriod
  topCut: Int
}

input EntriesFilter {
  maxStanding: Int
  minEventSize: Int = 60
  timePeriod: TimePeriod = ONE_MONTH
}

enum EntriesSortBy {
  NEW
  TOP
}

type Entry implements Node {
  commander: Commander!
  decklist: String
  draws: Int!
  id: ID!
  losses: Int!
  lossesBracket: Int!
  lossesSwiss: Int!
  maindeck: [Card!]!
  player: Player
  standing: Int!
  tables: [TopdeckTournamentTable!]!
  tournament: Tournament!
  winRate: Float
  wins: Int!
  winsBracket: Int!
  winsSwiss: Int!
}

input EntryFilters {
  maxDate: String
  maxDraws: Int
  maxLosses: Int
  maxSize: Int
  maxStanding: Int
  maxWins: Int
  minDate: String
  minDraws: Int
  minLosses: Int
  minSize: Int
  minStanding: Int
  minWins: Int
}

enum EntrySortBy {
  DATE
  DRAWS
  LOSSES
  STANDING
  WINRATE
  WINS
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Player implements Node {
  conversionRate: Float!
  draws: Int!
  entries: [Entry!]!
  id: ID!
  losses: Int!

  """
  Name of this player, as found in their most recent tournament.
  """
  name: String!
  topCuts: Int!

  """
  Unique topdeck profile ID.
  """
  topdeckProfile: String
  winRate: Float!
  wins: Int!
}

type Query {
  commander(name: String!): Commander!
  commanderNames: [String!]!
  commanders(
    filters: CommanderStatsFilters
    sortBy: CommanderSortBy = TOP_CUTS
    sortDir: SortDirection = DESC
  ): [Commander!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  player(profile: String!): Player!
  topCommanders(
    limit: Int = 24
    sortBy: TopCommandersSortBy = CONVERSION
    timePeriod: TimePeriod = ONE_MONTH
  ): [Commander!]!
  tournament(TID: String!): Tournament!
  tournaments(
    filters: TournamentFilters
    search: String
    sortBy: TournamentSortBy = DATE
  ): [Tournament!]!
}

enum SortDirection {
  ASC
  DESC
}

enum TimePeriod {
  ONE_MONTH
  SIX_MONTHS
  THREE_MONTHS
}

enum TopCommandersSortBy {
  CONVERSION
  POPULARITY
}

type TopdeckTournamentRound {
  round: String!
  tables: [TopdeckTournamentTable!]!
}

type TopdeckTournamentTable {
  entries: [Entry]!
  roundName: String!
  table: Int!
  winner: Entry
  winnerSeatPosition: Int
}

type Tournament implements Node {
  """
  ID of the tournament as tracked by topdeck.
  """
  TID: String!
  bracketUrl: String!
  breakdown: [TournamentBreakdownGroup!]!
  entries(commander: String, maxStanding: Int): [Entry!]!
  id: ID!

  """
  Display name of the tournament.
  """
  name: String!
  rounds: [TopdeckTournamentRound!]!

  """
  Number of players.
  """
  size: Int!

  """
  Number of swiss rounds.
  """
  swissRounds: Int!

  """
  Number of players making top cut.
  """
  topCut: Int!
  tournamentDate: String!
}

type TournamentBreakdownGroup {
  commander: Commander!
  conversionRate: Float!
  entries: Int!
  topCuts: Int!
}

input TournamentFilters {
  maxSize: Int
  minSize: Int
  timePeriod: TimePeriod
}

enum TournamentSortBy {
  DATE
  PLAYERS
}
